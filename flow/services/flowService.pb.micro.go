// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: FlowService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FlowService service

func NewFlowServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FlowService service

type FlowService interface {
	//新增流程
	NewFlow(ctx context.Context, in *NewFlowReq, opts ...client.CallOption) (*NewFlowResp, error)
	//删除流程
	RemoveFlow(ctx context.Context, in *RemoveFlowReq, opts ...client.CallOption) (*RemoveFlowResp, error)
	//修改流程
	UpdateFlow(ctx context.Context, in *UpdateFlowReq, opts ...client.CallOption) (*UpdateFlowResp, error)
	//关键词搜索 + 分页查询流程列表
	GetFlowList(ctx context.Context, in *GetFlowListReq, opts ...client.CallOption) (*GetFlowListResp, error)
}

type flowService struct {
	c    client.Client
	name string
}

func NewFlowService(name string, c client.Client) FlowService {
	return &flowService{
		c:    c,
		name: name,
	}
}

func (c *flowService) NewFlow(ctx context.Context, in *NewFlowReq, opts ...client.CallOption) (*NewFlowResp, error) {
	req := c.c.NewRequest(c.name, "FlowService.NewFlow", in)
	out := new(NewFlowResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowService) RemoveFlow(ctx context.Context, in *RemoveFlowReq, opts ...client.CallOption) (*RemoveFlowResp, error) {
	req := c.c.NewRequest(c.name, "FlowService.RemoveFlow", in)
	out := new(RemoveFlowResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowService) UpdateFlow(ctx context.Context, in *UpdateFlowReq, opts ...client.CallOption) (*UpdateFlowResp, error) {
	req := c.c.NewRequest(c.name, "FlowService.UpdateFlow", in)
	out := new(UpdateFlowResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowService) GetFlowList(ctx context.Context, in *GetFlowListReq, opts ...client.CallOption) (*GetFlowListResp, error) {
	req := c.c.NewRequest(c.name, "FlowService.GetFlowList", in)
	out := new(GetFlowListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FlowService service

type FlowServiceHandler interface {
	//新增流程
	NewFlow(context.Context, *NewFlowReq, *NewFlowResp) error
	//删除流程
	RemoveFlow(context.Context, *RemoveFlowReq, *RemoveFlowResp) error
	//修改流程
	UpdateFlow(context.Context, *UpdateFlowReq, *UpdateFlowResp) error
	//关键词搜索 + 分页查询流程列表
	GetFlowList(context.Context, *GetFlowListReq, *GetFlowListResp) error
}

func RegisterFlowServiceHandler(s server.Server, hdlr FlowServiceHandler, opts ...server.HandlerOption) error {
	type flowService interface {
		NewFlow(ctx context.Context, in *NewFlowReq, out *NewFlowResp) error
		RemoveFlow(ctx context.Context, in *RemoveFlowReq, out *RemoveFlowResp) error
		UpdateFlow(ctx context.Context, in *UpdateFlowReq, out *UpdateFlowResp) error
		GetFlowList(ctx context.Context, in *GetFlowListReq, out *GetFlowListResp) error
	}
	type FlowService struct {
		flowService
	}
	h := &flowServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FlowService{h}, opts...))
}

type flowServiceHandler struct {
	FlowServiceHandler
}

func (h *flowServiceHandler) NewFlow(ctx context.Context, in *NewFlowReq, out *NewFlowResp) error {
	return h.FlowServiceHandler.NewFlow(ctx, in, out)
}

func (h *flowServiceHandler) RemoveFlow(ctx context.Context, in *RemoveFlowReq, out *RemoveFlowResp) error {
	return h.FlowServiceHandler.RemoveFlow(ctx, in, out)
}

func (h *flowServiceHandler) UpdateFlow(ctx context.Context, in *UpdateFlowReq, out *UpdateFlowResp) error {
	return h.FlowServiceHandler.UpdateFlow(ctx, in, out)
}

func (h *flowServiceHandler) GetFlowList(ctx context.Context, in *GetFlowListReq, out *GetFlowListResp) error {
	return h.FlowServiceHandler.GetFlowList(ctx, in, out)
}
